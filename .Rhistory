ggplot(diamonds,aes(x=carat,y=price,color=cut))+geom_point()
ggplot(diamonds,aes(x=carat,y=price,color=cut))+geom_point()+geom_smooth()
ggplot(diamonds,aes(x=carat,y=price))+geom_point(aes(color=cut))+geom_smooth()
ggplot(diamonds,aes(x=carat,y=price,color=cut,shape=color))+geom_point()
gg<-ggplot(diamonds,aes(x=carat,y=price,color=cut))+geom_point()+labs(title="Scatt erplot",x="Caret",y="Price")
print(gg)
data<-iris
View(data)
data$Species <-null
data$Species <-NULL
head(data)
k<-kmeans(data,3)
k
plot(data[c("Sepal.Length","Sepal.Width")],col=k$cluster)
k$cluster
k$iter
k$totss
k$centers
k$betweenss
k$withinss
k$totss
k$ifault
library(cluster)
head(mtcars)
distance<-dist(as.matrix(mtcars))
distance
hc<-hclust(distance)
plot(hc)
install.packages("rpart")
library(rpart)
head(kyphosis)
fit<-rpart(Kyphosis~Age+Number+Start,method="class",data=kyphosis)
plot(fit,uniform = TRUE,main="Decision Tree")
text(fit,use.n = TRUE,all=TRUE,cex=.8)
install.packages("e1071")
library("e1071")
head(iris)
train<-iris[,1:4]
head(train)
class<-iris[,5]
test<-iris[93,-5]
test
iris[93,-4]
iris[93,1:4]
model<-naiveBayes(train,class)
table(predict(model,test))
install.packages(c("swirl", "swirlify"))
library(swril)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
exit()
bye()
swirl()
a<-c("a","a","b","c","b")
b<as.factor(a)
b<-as.factor(a)
b
install.packages("arules")
library("arules")
lastfm<-read.csv("F:\Data science training\Data Science Project_1\Data Science Project_Association\lastfm.csv")
lastfm[1:19,]
lastfm<-read.csv("F:/Data science training/Data Science Project_1/Data Science Project_Association/lastfm.csv")
lastfm[1:19,]
length(lastfm$user)
levels(lastfm$artist)
levels(lastfm$user)
levels(factor(lastfm$user))
playlist<split(x=lastfm[,"artist"],f=lastfm$user)
playlist
playlist[1:2]
playlist<-split(x=lastfm[,"artist"],f=lastfm$user)
playlist
?split
playlist<-lapply(playlist,unqiue)
playlist[1:2]
as?
?as
playlist<-as(playlist,"transactions")
list<-list(a=c(1,1),b=c(2,2),c=c(3,3))
list
m<-matrix(c(1,2,3,4),2,2)
apply(m,1,sum)
m
apply(m,2,sum)
lapply(list,sum)
a<-matrix(c(1,1,1,1),2,2)
b<-matrix(c(2,2,2,2),2,2)
foo<-array(c(a,b),c(2,2,2))
foo[1,,]
foo
foo[2,,]
foo[2,1,]
foo[,,1]
foo[,,2]
foo[,1,2]
vec<-c(1,2,3,4)
mat<-matrix(vec,2,2)
foo<-list(vec,mat)
foo
foo[[1]]\
foo[[1]]
foo[[2]]
foo[[2]][1,]
a<-matrix(c(1,1,1,1),2,2)
b<-matrix(c(2,2,2,2),2,2)
foo<-array(c(a,b),c(2,2,2))
vector1 <- c(5,9,3)
vector2 <- c(10,11,12,13,14,15)
# Take these vectors as input to the array.
result <- array(c(vector1,vector2),dim = c(3,3,2))
result[3,,2]
result
result[1,,]
typeof(playlist)
x <- list(a = 1, b = 1:3, c = 10:100)
x
sapply(x, FUN = length)
list<-list(a=c(1,2),b=c(1,2,3),c=c(1,2,3,4))
sapply(list,range)
list
sapply(list,sum)
class(sapply(list,sum))
lapply(list,sum)
gender<-c("m","m","m","f","f","f","m")
f<-factor(gender)
f
gender
levels(gender)
tapply(age,f,mean)
age<-c(23,33,28,21,20,19,34)
tapply(age,f,mean)
playlist <- as(playlist,"transactions")
library(arules)
credit<-read.csv("F:/Data science training/Data Science Project_2/Data Science Project_Classification/germancredit.csv")
credit.head()
credit[1:5]
credit[1:5,]
credit$Default.levels
credit$Default<-factor(credit$Default)
credit$Default.levels
credit$Default.level
levels(credit$Default)
levels(credit$history )
levels(credit$history )=c("good","good","poor","poor","terrible")
levels(credit$history )
credit[1:5,]
levels(credit$foreign)
credit$foreign<-factor(credit$foreign,levels=c("A201","A202"),labels=c("foreign","german"))
credit[1:5,]
credit$rent<-factor(credit$housing=="A151")
credit$rent
levels(credit$purpose)
credit$purpose<-factor(credit$purpose,levels=c("A40","A41","A42","A43","A44","A45","A46","A47","A48","A49","A410"))
levels(credit$purpose)<-c("newcar","usedcar",rep("goods/repair",4),"edu","NA","edu","biz","biz")
credit[1:5,]
rep("goods/repair",4)
colnames(credit)
credit<-credit[,c("Default","duration","amount","installment","age","history","purpose","foreign","rent")]
credit[1:3,]
summary(credit)
x<-normalize(credit[,c(2,3,4)])
x<-normalize(credit[,c(2,3,4)])
m<-matrix(c(1,2,3,4),2,2)
apply(m,1,sum)
apply(m,2,sum)
m
normalize <-funciton(x){
return (x-mean(x))/sd(x)
}
normalize <-function(x){
(x-mean(x))/sd(x)
}
x<-normalize(credit[,c(2,3,4)])
normalize(credit[,2])
normalize(credit[,3])
normalize(credit[,4])
credit[1:3,]
credit[,2]<-normalize(credit[,2])
credit[,3]<-normalize(credit[,3])
credit[,4]<-normalize(credit[,4])
credit[1:3,]
set.seed(1)
train<-sample(1:1000,900)
train
xtrain<-credit[train,2:9]
ytrain<-credit$Default[train]
xnew<-creidt[train,1]
ynew<-credit$Default[-train]
xtrain<-credit[train,2:9]
ytrain<-credit$Default[train]
xnew<-credit[train,1]
ynew<-credit$Default[-train]
library(class)
library(class)
nearest1<-knn(train=xtrain,test=xnew,cl=ytrain,k=1)
nearest3<-knn(train=xtrain,test=xnew,cl=ytrain,k=3)
xtrain<-credit[train,2:9]
ytrain<-credit$Default[train]
xnew<-credit[-train,2:9]
ynew<-credit$Default[-train]
nearest1<-knn(train=xtrain,test=xnew,cl=ytrain,k=1)
nearest3<-knn(train=xtrain,test=xnew,cl=ytrain,k=3)
xtrain<-credit[train,2:4]
ytrain<-credit$Default[train]
xnew<-credit[-train,2:4]
ynew<-credit$Default[-train]
nearest1<-knn(train=xtrain,test=xnew,cl=ytrain,k=1)
nearest1
nearest3<-knn(train=xtrain,test=xnew,cl=ytrain,k=3)
nearest3
data.frame(ynew,nearest1,nearest3)[1:10,]
pcorrn1=sum(ynew==nearest1)/100
pcorrn3=sum(ynew==nearest3)/100
pcorrn1
pcorrn3
plot(xtrain[,c("amount","duration")],col=c(4,3,6,2)[credit[train,"installment
"]],pch=c(1,2)[as.numeric(ytrain)],main="Predicted default, by 3 nearest
neighbors",cex.main=.95)
points(xnew[,c("amount","duration")],bg=c(4,3,6,2)[credit[train,"installment"
]],pch=c(21,24)[as.numeric(nearest3)],cex=1.2,col=grey(.7))
legend("bottomright",pch=c(1,16,2,17),bg=c(1,1,1,1),legend=c("data 0","pred
0","data 1","pred 1"),title="default",bty="n",cex=.8)
legend("topleft",fill=c(4,3,6,2),legend=c(1,2,3,4),title="installment
%",horiz=TRUE,bty="n",col=grey(.7),cex=.8)
pcorr=dim(10)
pcorr
for(k in 1:10){
pred=knn.cv(credit[,c(2,3,4)],cl=credit$Default,k)
pcorr[k]=sum(credit$Default==pred)/1000
}
pcorr
num<-1:5
for(val in num){
if(val==3)
break
}
print(val)
num<-1:5
for(val in num){
if(val==3)
next
}
print(val)
}
num<-1:5
for(val in num){
if(val==3)
next
}
print(val)
autoroute=read.table(
+ "http://freakonometrics.blog.free.fr/public/data/autoroute.csv",
+ header=TRUE,sep=";")
autoroute=read.table(
"http://freakonometrics.blog.free.fr/public/data/autoroute.csv",
header=TRUE,sep=";")
library(dplyr)
library(tidyr)
setwd("F:/Bike Sharing")
#Read training file
dat=read.csv("train.csv")
#Read test file
bike_test<-read.csv("test.csv")
all<-read.csv("all.csv")
all<-read.csv("all.csv")
setwd("F:\R\Bike-Sharing-demand-prediction")
#Read training file
dat=read.csv("train.csv")
#Read test file
bike_test<-read.csv("test.csv")
all<-read.csv("all.csv")
all<-read.csv("all.csv")
setwd("F:/R/Bike-Sharing-demand-prediction")
getwd()
all<-read.csv("all.csv")
View(all)
all$actual<- merge(all$dteday,all$hr,by="instant")
View(all)
all$actual<- paste(all$dteday,all$hr)
head(all)
bike<-separate(dat, col = datetime, into = c("Date", "Hour"), sep = " ")
bike_test<-separate(bike_test, col = datetime, into = c("Date", "Hour"), sep = " ")
bike<-separate(bike,col=Date,into=c("Year","Month","Date"),sep="-")
bike_test<-separate(bike_test,col=Date,into=c("Year","Month","Date"),sep="-")
bike$hour_simple<-substr(bike$Hour,1,2)
bike_test$hour_simple<-substr(bike_test$Hour,1,2)
bike$Year<-as.factor(bike$Year)
bike_test$Year<-as.factor(bike_test$Year)
bike$Month<-as.factor(bike$Month)
bike_test$Month<-as.factor(bike_test$Month)
bike$hour_simple<-as.factor(bike$hour_simple)
bike_test$hour_simple<-as.factor(bike_test$hour_simple)
#Make categorical variables as nominal variables
bike$season<-factor(bike$season,levels = c(1,2,3,4),labels=c("spring","summer","fall","winter"))
bike_test$season<-factor(bike_test$season,levels = c(1,2,3,4),labels=c("spring","summer","fall","winter"))
bike$holiday<-factor(bike$holiday,levels=c(0,1),labels=c("no","yes"))
bike_test$holiday<-factor(bike_test$holiday,levels=c(0,1),labels=c("no","yes"))
bike$workingday<-factor(bike$workingday,levels=c(0,1),labels=c("no","yes"))
bike_test$workingday<-factor(bike_test$workingday,levels=c(0,1),labels=c("no","yes"))
bike$weather<-factor(bike$weather,levels=c(1,2,3,4),labels=c("clear","mist","light rainsnow","heavy rainsnow"))
bike_test$weather<-factor(bike_test$weather,levels=c(1,2,3,4),labels=c("clear","mist","light rainsnow","heavy rainsnow"))
# Create the formula string for demand as a function of the inputs
outcome<-"count"
vars<-c("hour_simple","holiday","workingday","weather","temp","humidity","windspeed","season")
(fmla <- paste(outcome, "~", paste(vars, collapse = " + ")))
head(bike_test)
head(bike)
bike_test<-read.csv("test.csv")
head(bike_test)
all$hr<-paste(all$hr,":00")
head(all)
View(bike_test)
all<-read.csv("all.csv")
all$actual<- paste(all$dteday,all$hr)
format(all$actual, format = "yyyy-mm-dd hh:mm:ss", usetz = FALSE)
all$actual1<-format(all$actual, format = "yyyy-mm-dd hh:mm:ss", usetz = FALSE)
head(all$actual1)
all$actual1<-format(all$actual, format = "%Y-%m-%d %H:%M:%S", usetz = FALSE)
head(all$actual1)
head(all)
all$hour1<-format(all$hr,format="%H:%M:%S")
head(all$hour1)
all$hour1<-trim(all$hr)
all$hour1<-stri_trim(all$hr)
install.packages("gdata")
library(gdata)
all$hour1<-trim(all$hr)
head(all$hour1)
all$hour1<-strftime(all$hour1,"%Y-%m-%d %H:%M:%S")
all$hour1<-strftime(all$hour1,"%H:%M:%S")
all$actual<- paste(all$dteday,all$hour1)
head(all$actual)
all<-read.csv("all.csv")
all$hr<-trim(all$hr)
all$actual<- paste(all$dteday,all$hr)
all$actual1<-strftime(all$actual,"%Y-%m-%d %H:%M:%S")
head(all)
tail(all)
all$hr<-trim(all$hr)
all$hr<-paste(all$hr,":00")
all$actual<- paste(all$dteday,all$hr)
all$actual1<-strftime(all$actual,"%Y-%m-%d %H:%M:%S")
tail(all)
strftime(all$hr,"%H:%M:%S")
strftime(all$hr,"%H:%M")
all$hr<-paste(trim(all$hr),":00")
all$hr
paste0(5, ':00')
paste0(all$hr, ':00')
all$hr
all<-read.csv("all.csv")
all$hr
trim(all$hr)
paste0(all$hr,":00")
all$actual<- paste(all$dteday,all$hr1)
all$actual
all$hr1<-paste0(all$hr,":00")
all$actual<- paste(all$dteday,all$hr1)
head(all$actual)
all$actual1<-strftime(all$actual,"%Y-%m-%d %H:%M:%S")
head(all$actual1)
head(bike_test)
all$datetime<-strftime(all$actual,"%Y-%m-%d %H:%M:%S")
head(all)
all1<-join(all, bike_test, by = "datetime", type = "inner", match = "all")
library("dplyr")
all1<-inner_join(all, bike_test, by = "datetime", type = "inner")
all1
View(all1)
length(all1$instant)
rmse(bike_test_predict, actual)
#Read training file
dat=read.csv("train.csv")
#Read test file
bike_test<-read.csv("test.csv")
all<-read.csv("all.csv")
#Test file count
all$hr1<-paste0(all$hr,":00")
all$datetime<- paste(all$dteday,all$hr1)
all$datetime<-strftime(all$datetime,"%Y-%m-%d %H:%M:%S")
library("dplyr")
all_new<-inner_join(all, bike_test, by = "datetime", type = "inner")
actual<-all_new$cnt
#Split time stamp into Year, Month, Date and Hour
bike<-separate(dat, col = datetime, into = c("Date", "Hour"), sep = " ")
bike_test<-separate(bike_test, col = datetime, into = c("Date", "Hour"), sep = " ")
bike<-separate(bike,col=Date,into=c("Year","Month","Date"),sep="-")
bike_test<-separate(bike_test,col=Date,into=c("Year","Month","Date"),sep="-")
bike$hour_simple<-substr(bike$Hour,1,2)
bike_test$hour_simple<-substr(bike_test$Hour,1,2)
bike$Year<-as.factor(bike$Year)
bike_test$Year<-as.factor(bike_test$Year)
bike$Month<-as.factor(bike$Month)
bike_test$Month<-as.factor(bike_test$Month)
bike$hour_simple<-as.factor(bike$hour_simple)
bike_test$hour_simple<-as.factor(bike_test$hour_simple)
#Make categorical variables as nominal variables
bike$season<-factor(bike$season,levels = c(1,2,3,4),labels=c("spring","summer","fall","winter"))
bike_test$season<-factor(bike_test$season,levels = c(1,2,3,4),labels=c("spring","summer","fall","winter"))
bike$holiday<-factor(bike$holiday,levels=c(0,1),labels=c("no","yes"))
bike_test$holiday<-factor(bike_test$holiday,levels=c(0,1),labels=c("no","yes"))
bike$workingday<-factor(bike$workingday,levels=c(0,1),labels=c("no","yes"))
bike_test$workingday<-factor(bike_test$workingday,levels=c(0,1),labels=c("no","yes"))
bike$weather<-factor(bike$weather,levels=c(1,2,3,4),labels=c("clear","mist","light rainsnow","heavy rainsnow"))
bike_test$weather<-factor(bike_test$weather,levels=c(1,2,3,4),labels=c("clear","mist","light rainsnow","heavy rainsnow"))
# Create the formula string for demand as a function of the inputs
outcome<-"count"
vars<-c("hour_simple","holiday","workingday","weather","temp","humidity","windspeed","season")
(fmla <- paste(outcome, "~", paste(vars, collapse = " + ")))
(mean_bikes <- mean(bike$count))
(var_bikes <- var(bike$count))
library("vtreat")
nRows <- nrow(bike)
# Implement the 3-fold cross-fold plan with vtreat
splitPlan <- kWayCrossValidation(nRows,3,NULL,NULL)
k <- 3 # Number of folds
bike$pred.poisson.cv <- 0
for(i in 1:k) {
split <- splitPlan[[i]]
model <- glm(fmla,family = quasipoisson, data = bike[split$train,])
bike$pred.poisson.cv[split$app] <- predict(model, data=bike[split$app,],type = "response")
}
bike$pred.rf.cv <- 0
seed<-423563
for(i in 1:k) {
split <- splitPlan[[i]]
model <- ranger(fmla, # formula
bike, # data
num.trees = 500,
respect.unordered.factors = "order",
seed = seed)
bike$pred.rf.cv[split$app] <- predict(model, data=bike[split$app,])$predictions
}
rmse<-function(predcol, ycol) {
res <- predcol - ycol
sqrt(mean(res^2))
}
rmse(bike$pred.poisson.cv, bike$count)
rmse(bike$pred.rf.cv, bike$count)
library("ranger")
seed<-423563
(bike_model_rf <- ranger(fmla,
bike,
num.trees = 500,
respect.unordered.factors = "order",
seed = seed))
bike_test_predict=predict(bike_model_rf,bike_test)$predictions
rmse(bike_test_predict, actual)
install.packages("forecast")
install.packages("tseries")
library('ggplot2')
library('forecast')
library('tseries')
#Read data
daily_data = read.csv('day.csv', header=TRUE, stringsAsFactors=FALSE)
View(daily_data)
daily_data$Date = as.Date(daily_data$dteday)
ggplot(daily_data, aes(Date, cnt)) + geom_line() + scale_x_date('month')  + ylab("Daily Bike rentals") +
xlab("")
count_ts = ts(daily_data[, c('cnt')])
daily_data$clean_cnt = tsclean(count_ts)
ggplot() +
geom_line(data = daily_data, aes(x = Date, y = clean_cnt)) + ylab('Cleaned Bicycle Count')
count_ma = ts(na.omit(daily_data$cnt_ma), frequency=30)
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
ggplot() +
geom_line(data = daily_data, aes(x = Date, y = clean_cnt, colour = "Counts")) +
geom_line(data = daily_data, aes(x = Date, y = cnt_ma,   colour = "Weekly Moving Average"))  +
geom_line(data = daily_data, aes(x = Date, y = cnt_ma30, colour = "Monthly Moving Average"))  +
ylab('Bicycle Count')
daily_data$cnt_ma = ma(daily_data$clean_cnt, order=7) # using the clean count with no outliers
daily_data$cnt_ma30 = ma(daily_data$clean_cnt, order=30)
ggplot() +
geom_line(data = daily_data, aes(x = Date, y = clean_cnt, colour = "Counts")) +
geom_line(data = daily_data, aes(x = Date, y = cnt_ma,   colour = "Weekly Moving Average"))  +
geom_line(data = daily_data, aes(x = Date, y = cnt_ma30, colour = "Monthly Moving Average"))  +
ylab('Bicycle Count')
count_ma = ts(na.omit(daily_data$cnt_ma), frequency=30)
decomp = stl(count_ma, s.window="periodic")
deseasonal_cnt <- seasadj(decomp)
plot(decomp)
plot(count_ma)
d_count_ma <- diff(count_ma)
plot(d_count_ma)
acf2(d_count_ma,max.lag=25)
install.packages("astsa")
library('astsa')
acf2(d_count_ma,max.lag=25)
acf2(d_count_ma)
sarima(count_ma,p=2,d=1,q=1,P=0,D=1,Q=1,S=7)
sarima(count_ma,P=0,D=1,Q=1,S=7)
sarima(count_ma,p=1,d=1,q=1,P=0,D=1,Q=1,S=7)
sarima(count_ma,p=1,d=1,q=1,P=0,D=1,Q=1,S=6)
sarima(count_ma,p=2,d=1,q=1,P=0,D=1,Q=1,S=7)
sarima(count_ma,p=1,d=1,q=1,P=0,D=1,Q=1,S=7)
sarima(count_ma,p=1,d=1,q=1)
sarima(count_ma,p=1,d=1,q=7)
count_ma
length(count_ma)
length(daily_data$cnt_ma)
sarima.for(count_ma, n.ahead = 36, p=1,d=1,q=7)
sarima.for(count_ma, n.ahead = 24, p=1,d=1,q=7)
sarima.for(count_ma, n.ahead = 30, p=1,d=1,q=7)
sarima.for(count_ma, n.ahead = 30, p=1,d=1,q=7)
